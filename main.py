import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from environs import Env

dp = Dispatcher()

def init_db():
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            weight REAL,
            tall REAL,
            age INTEGER
        )
    """)
    # --- —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏–∫–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è ---
    cur.execute('''CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE,
        kcal REAL,
        protein REAL,
        fat REAL,
        carb REAL
    )''')

    cur.execute('''CREATE TABLE IF NOT EXISTS food_log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        date TEXT,
        product_id INTEGER,
        grams REAL,
        kcal REAL,
        protein REAL,
        fat REAL,
        carb REAL
    )''')

    conn.commit()
    conn.close()

def save_user(user_id, weight, tall, age):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("""
        INSERT OR REPLACE INTO users (user_id, weight, tall, age)
        VALUES (?, ?, ?, ?)
    """, (user_id, weight, tall, age))
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT weight, tall, age FROM users WHERE user_id = ?", (user_id,))
    data = cur.fetchone()
    conn.close()
    return data

class CaloriesForm(StatesGroup):
    weight = State()
    tall = State()
    age = State()

class AddMeal(StatesGroup):
    product = State()
    grams = State()

class AddProduct(StatesGroup):
    name = State()
    kcal = State()
    protein = State()
    fat = State()
    carb = State()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –ø—Ä–∞—Ü—é—é –Ω–∞ aiogram v3 üöÄ\n–ù–∞–ø–∏—à–∏ /help —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –æ–ø—Ü—ñ—ó.")

@dp.message(Command("help"))
async def command_help(message: Message):
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π", callback_data="Calories")],
            [types.InlineKeyboardButton(text="–ü–æ—Ä–∞–¥–∞", callback_data="Advice")],
            [types.InlineKeyboardButton(text="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", callback_data="Trainings")],
            [types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è', callback_data='ListSportEqupment')],
            [types.InlineKeyboardButton(text='–©–æ–¥–µ–Ω–Ω–∏–∫ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è', callback_data='FoodDiary')]
        ]
    )
    await message.answer("–û–±–µ—Ä–∏ —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:", reply_markup=kb)

@dp.callback_query(F.data == 'FoodDiary')
async def food_diary(call: CallbackQuery):
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç —É –±–∞–∑—É", callback_data="AddProduct")],
            [types.InlineKeyboardButton(text="üçΩ –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–π–æ–º —ó–∂—ñ", callback_data="AddMeal")],
            [types.InlineKeyboardButton(text="üìä –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è", callback_data="DaySummary")],
        ]
    )
    await call.message.answer("–©–æ–¥–µ–Ω–Ω–∏–∫ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è: –æ–±–µ—Ä–∏ –¥—ñ—é ‚¨áÔ∏è", reply_markup=kb)
    await call.answer()

# --- –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É ---
@dp.callback_query(F.data == "AddProduct")
async def cb_add_product(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É:")
    await state.set_state(AddProduct.name)
    await call.answer()

@dp.message(AddProduct.name)
async def add_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.lower())
    await message.answer("–ö–∫–∞–ª –Ω–∞ 100–≥:")
    await state.set_state(AddProduct.kcal)

@dp.message(AddProduct.kcal)
async def add_product_kcal(message: Message, state: FSMContext):
    try:
        await state.update_data(kcal=float(message.text))
    except ValueError:
        await state.update_data(kcal=int(message.text))
    await message.answer("–ë—ñ–ª–∫–∏ –Ω–∞ 100–≥:")
    await state.set_state(AddProduct.protein)

@dp.message(AddProduct.protein)
async def add_product_protein(message: Message, state: FSMContext):
    try:
        await state.update_data(protein=float(message.text))
    except ValueError:
        await state.update_data(protein=int(message.text))
    await message.answer("–ñ–∏—Ä–∏ –Ω–∞ 100–≥:")
    await state.set_state(AddProduct.fat)

@dp.message(AddProduct.fat)
async def add_product_fat(message: Message, state: FSMContext):
    try:
        await state.update_data(fat=float(message.text))
    except ValueError:
        await state.update_data(fat=int(message.text))
    await message.answer("–í—É–≥–ª–µ–≤–æ–¥–∏ –Ω–∞ 100–≥:")
    await state.set_state(AddProduct.carb)

@dp.message(AddProduct.carb)
async def add_product_carb(message: Message, state: FSMContext):
    data = await state.get_data()
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute(
        "INSERT OR REPLACE INTO products (name, kcal, protein, fat, carb) VALUES (?, ?, ?, ?, ?)",
        (data["name"], data["kcal"], data["protein"], data["fat"], float(message.text)),
    )
    conn.commit()
    conn.close()
    await message.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–¥–∞–Ω–æ!")
    await state.clear()

# --- –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–π–æ–º—É —ó–∂—ñ ---
@dp.callback_query(F.data == "AddMeal")
async def cb_add_meal(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É:")
    await state.set_state(AddMeal.product)
    await call.answer()

@dp.message(AddMeal.product)
async def meal_product(message: Message, state: FSMContext):
    await state.update_data(product=message.text.lower())
    await message.answer("–°–∫—ñ–ª—å–∫–∏ –≥—Ä–∞–º—ñ–≤?")
    await state.set_state(AddMeal.grams)

@dp.message(AddMeal.grams)
async def meal_grams(message: Message, state: FSMContext):
    grams = float(message.text)
    data = await state.get_data()
    product_name = data["product"]

    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM products WHERE name=?", (product_name,))
    product = cur.fetchone()

    if not product:
        await message.answer("‚ùå –¶—å–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–µ–º–∞ –≤ –±–∞–∑—ñ. –î–æ–¥–∞–π –π–æ–≥–æ —á–µ—Ä–µ–∑ '‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç'.")
        await state.clear()
        conn.close()
        return

    product_id, name, kcal100, p100, f100, c100 = product
    kcal = kcal100 * grams / 100
    protein = p100 * grams / 100
    fat = f100 * grams / 100
    carb = c100 * grams / 100

    cur.execute(
        "INSERT INTO food_log (user_id, date, product_id, grams, kcal, protein, fat, carb) VALUES (?, DATE('now'), ?, ?, ?, ?, ?, ?)",
        (message.from_user.id, product_id, grams, kcal, protein, fat, carb),
    )
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {grams} –≥ {name} ({kcal:.1f} –∫–∫–∞–ª, –ë:{protein:.1f} –ñ:{fat:.1f} –í:{carb:.1f})")
    await state.clear()

# --- –ø—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è ---
@dp.callback_query(F.data == "DaySummary")
async def cb_day_summary(call: CallbackQuery):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute(
        "SELECT SUM(kcal), SUM(protein), SUM(fat), SUM(carb) FROM food_log WHERE user_id=? AND date=DATE('now')",
        (call.from_user.id,),
    )
    result = cur.fetchone()
    conn.close()

    if result and result[0]:
        kcal, p, f, c = result
        await call.message.answer(f"üìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n"
                                  f"–ö–∞–ª–æ—Ä—ñ—ó: {kcal:.1f}\n"
                                  f"–ë—ñ–ª–∫–∏: {p:.1f} –≥\n"
                                  f"–ñ–∏—Ä–∏: {f:.1f} –≥\n"
                                  f"–í—É–≥–ª–µ–≤–æ–¥–∏: {c:.1f} –≥")
    else:
        await call.message.answer("–¢–∏ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –¥–æ–¥–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ üôÇ")
    await call.answer()


@dp.callback_query(F.data == "Calories")
async def callbacks_calories(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—é –≤–∞–≥—É (–∫–≥):")
    await state.set_state(CaloriesForm.weight)
    await call.answer()

@dp.callback_query(F.data == "Advice")
async def callbacks_advice(call: CallbackQuery):
    await call.message.answer(
        "–ì–æ–ª–æ–≤–Ω–µ –≤ —Å—Ö—É–¥–Ω–µ–Ω–Ω—ñ ‚Äì —Ü–µ –¥–µ—Ñ—ñ—Ü–∏—Ç –∫–∞–ª–æ—Ä—ñ–π. –í—ñ–Ω —É—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–±–æ —á–µ—Ä–µ–∑ –º–µ–Ω—à–µ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è —ó–∂—ñ, –∞–±–æ —á–µ—Ä–µ–∑ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –î–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä—É—Ö–∞–π—Å—è —ñ —Ö–∞—Ä—á—É–π—Å—è –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ!"
    )
    await call.answer()

@dp.callback_query(F.data == "Trainings")
async def callbacks_trainings(call: CallbackQuery):
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–õ–µ–≥–∫–µ", callback_data="LiteTraining")],
            [types.InlineKeyboardButton(text="–°–∏–ª–æ–≤–µ", callback_data="PowerTraining")]
        ]
    )
    await call.message.answer("–û–±–µ—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "ListSportEqupment")
async def callbacks_equipment(call: CallbackQuery, state: FSMContext):
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text='1. –°–∫–∞–∫–∞–ª–∫–∞', url='https://rozetka.com.ua/ua/322970512/p322970512/')],
            [types.InlineKeyboardButton(text='2. –ï—Å–ø–∞–Ω–¥–µ—Ä', url='https://rozetka.com.ua/ua/322970539/p322970539/')],
            [types.InlineKeyboardButton(text='3. –†–æ–ª–∏–∫ –¥–ª—è –ø—Ä–µ—Å–∞', url='https://rozetka.com.ua/ua/395121630/p395121630/')],
            [types.InlineKeyboardButton(text='4. –î–æ—à–∫–∞ –¥–ª—è –≤—ñ–¥–∂–∏–º–∞–Ω—å', url='https://rozetka.com.ua/ua/425030877/p425030877/')],
            [types.InlineKeyboardButton(text='5. –§—ñ—Ç–Ω–µ—Å –≥—É–º–∫–∏', url='https://rozetka.com.ua/ua/cornix-xr-0045/p366282078/')],
            [types.InlineKeyboardButton(text='6. –ì–∞–Ω—Ç–µ–ª—ñ', url='https://rozetka.com.ua/ua/neo_sport_neo_g21k/p21155408/')],
        ]
    )
    await call.message.answer("–û—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ, –∞–ª–µ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è: ", reply_markup=kb)
    await call.answer()
    await call.message.answer(
        '–°–∫–∞–∫–∞–ª–∫–∞ ‚Äî —Ç—Ä–µ–Ω—É—î –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —ñ —Å–µ—Ä—Ü–µ–≤–æ-—Å—É–¥–∏–Ω–Ω—É —Å–∏—Å—Ç–µ–º—É, –¥–æ–±—Ä–µ —Å–ø–∞–ª—é—î –∫–∞–ª–æ—Ä—ñ—ó.\n'
        '–ï—Å–ø–∞–Ω–¥–µ—Ä ‚Äî —Ä–æ–∑–≤–∏–≤–∞—î —Å–∏–ª—É —Ä—É–∫, –ø–µ—Ä–µ–¥–ø–ª—ñ—á—á—è —ñ —Å–∏–ª—É —Ö–≤–∞—Ç—É.\n'
        '–†–æ–ª–∏–∫ –¥–ª—è –ø—Ä–µ—Å–∞ ‚Äî —á—É–¥–æ–≤–æ —Ç—Ä–µ–Ω—É—î –º‚Äô—è–∑–∏ –∂–∏–≤–æ—Ç–∞. –Ø–∫—â–æ —Ä–æ–±–∏—Ç–∏ –≤–ø—Ä–∞–≤–∏ –∑ –∫–æ–ª—ñ–Ω ‚Äî –æ—Å–Ω–æ–≤–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –ø—Ä–µ—Å.\n'
        '–î–æ—à–∫–∞ –¥–ª—è –≤—ñ–¥–∂–∏–º–∞–Ω—å ‚Äî –∑–∞–≤–¥—è–∫–∏ —Ä—ñ–∑–Ω–∏–º –ø–æ–ª–æ–∂–µ–Ω–Ω—è–º —Ä—É—á–æ–∫ –º–æ–∂–Ω–∞ –∑–º—ñ—â—É–≤–∞—Ç–∏ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≥—Ä—É–¥–∏, –ø–ª–µ—á—ñ —á–∏ —Ç—Ä–∏—Ü–µ–ø—Å.\n'
        '–§—ñ—Ç–Ω–µ—Å-–≥—É–º–∫–∏ ‚Äî —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ: –ø—ñ–¥—Ö–æ–¥—è—Ç—å —ñ –¥–ª—è —Ä–æ–∑–º–∏–Ω–∫–∏, —ñ –¥–ª—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å. –î–æ–ø–æ–º–∞–≥–∞—é—Ç—å –∑–±—ñ–ª—å—à–∏—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.\n'
        '–ì–∞–Ω—Ç–µ–ª—ñ ‚Äî –±–∞–∑–æ–≤–∏–π —Å–Ω–∞—Ä—è–¥ –¥–ª—è —Å–∏–ª–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —É–¥–æ–º–∞. –û—Å–æ–±–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É –±—ñ—Ü–µ–ø—Å—ñ–≤ —ñ —Ç—Ä–∏—Ü–µ–ø—Å—ñ–≤.'
    )

@dp.callback_query(F.data == "LiteTraining")
async def send_gif_lite(call: CallbackQuery):
    await call.message.answer_animation(
        animation="https://media.giphy.com/media/Ju7l5y9osyymQ/giphy.gif",
        caption="–†–æ–∑–º–∏–Ω–∫–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É üèÉ‚Äç‚ôÇÔ∏è"
    )
    await call.answer()

@dp.callback_query(F.data == "PowerTraining")
async def send_gif_power(call: CallbackQuery):
    await call.message.answer_animation(
        animation="https://gymbeam.cz/blog/wp-content/uploads/2021/10/01-pushup.gif",
        caption="–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è"
    )
    await call.answer()

# --- FSM: –≤–∞–≥–∞ ---
@dp.message(CaloriesForm.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ —É –∫–≥!")
        return
    await state.update_data(weight=weight)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –∑—Ä—ñ—Å—Ç (—Å–º):")
    await state.set_state(CaloriesForm.tall)

# --- FSM: –∑—Ä—ñ—Å—Ç ---
@dp.message(CaloriesForm.tall)
async def process_tall(message: Message, state: FSMContext):
    try:
        tall = float(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ —É —Å–º!")
        return
    await state.update_data(tall=tall)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫ (—Ä–æ–∫—ñ–≤):")
    await state.set_state(CaloriesForm.age)

# --- FSM: –≤—ñ–∫ + –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ SQLite ---
@dp.message(CaloriesForm.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ —É —Ä–æ–∫–∞—Ö!")
        return

    await state.update_data(age=age)
    data = await state.get_data()

    # ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    save_user(message.from_user.id, data["weight"], data["tall"], data["age"])

    # ‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π
    calories = (10 * data["weight"]) + (6.25 * data["tall"]) - (5 * data["age"]) + 5
    protein = (calories * 0.3) / 4
    fat = (calories * 0.3) / 9
    carbs = (calories * 0.4) / 4

    await message.answer(f"üìä –¢–≤–æ—è –±–∞–∑–æ–≤–∞ –Ω–æ—Ä–º–∞: {round(calories)} –∫–∫–∞–ª/–¥–µ–Ω—å")
    await message.answer(
        f"–ë–ñ–í:\n{round(protein)} –≥ –±—ñ–ª–∫—ñ–≤, {round(fat)} –≥ –∂–∏—Ä—ñ–≤, {round(carbs)} –≥ –≤—É–≥–ª–µ–≤–æ–¥—ñ–≤"
    )
    await state.clear()

@dp.message(Command("mydata"))
async def cmd_mydata(message: Message):
    data = get_user(message.from_user.id)
    if data:
        w, t, a = data
        await message.answer(f"üìå –¢–≤–æ—ó –¥–∞–Ω—ñ:\n–í–∞–≥–∞: {w} –∫–≥\n–ó—Ä—ñ—Å—Ç: {t} —Å–º\n–í—ñ–∫: {a} —Ä–æ–∫—ñ–≤")
    else:
        await message.answer("‚ùå –î–∞–Ω—ñ —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /calories.")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    env = Env()
    env.read_env(".env")
    bot = Bot(token=env('TOKEN'))
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())